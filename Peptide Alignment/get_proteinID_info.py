### Load libraries
import csv
import pandas
import pickle
import os




### Read in blast_results as generated from run_blast.py
blast_results = pandas.read_csv('blast_results.txt', sep = '\t', low_memory = False)




### Read in data dictionary of protein id as generated by mm_protein_data_dictionary.py
pkl_file = open('mm_peptide_info.pkl', 'rb')
peptide_info = pickle.load(pkl_file)
pkl_file.close()





### Seeing how blast_results look
blast_results



### Seeing how peptide_info look
peptide_info





### Create list to store other protein id information
subject_gene_id       = []
subject_gene_symbol   = []
subject_transcript_id = []
subject_chromosome    = []



### Loop through blast results to get other protein id information
for i in range(0, len(blast_results)):
    
    
    
    # If the peptide aligned to a subject
    if not pandas.isnull(blast_results['subjects'][i]):
        
        # Get subjects (which are protein ids)
        subject = blast_results['subjects'][i].split(',')
        
        
        
        
        # Extract gene id, gene symbol, transcript id, and chromosome of the protein id
        subject_gene_id.append(','.join(peptide_info[s]['gene_id'] for s in subject))
        subject_gene_symbol.append(','.join(peptide_info[s]['gene_symbol'] for s in subject))
        subject_transcript_id.append(','.join(peptide_info[s]['transcript_id'] for s in subject))
        subject_chromosome.append(','.join(peptide_info[s]['chromosome'].split(':')[1] for s in subject))
        
        
        
        
        
        
    else:
        
        # If the peptide did not align to any subjects, append NA
        subject_gene_id.append('NA')
        subject_gene_symbol.append('NA')
        subject_transcript_id.append('NA')
        subject_chromosome.append('NA')



        
        
        
        
        
        
### Convert list to series
subject_gene_id       = pandas.Series(subject_gene_id)
subject_gene_symbol   = pandas.Series(subject_gene_symbol)
subject_transcript_id = pandas.Series(subject_transcript_id)
subject_chromosome    = pandas.Series(subject_chromosome)








### Add columns to blast_results
blast_results['gene_id'] = subject_gene_id
blast_results['gene_symbol'] = subject_gene_symbol
blast_results['transcript_id'] = subject_transcript_id
blast_results['chromosome'] = subject_chromosome 







### Seeing how blast_results look
blast_results







### Save blast_results as .txt
blast_results.to_csv('blast_results.txt', sep = '\t', index = False, header = True)

